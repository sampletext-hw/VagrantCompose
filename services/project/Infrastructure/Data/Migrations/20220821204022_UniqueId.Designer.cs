// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(AkianaDbContext))]
    [Migration("20220821204022_UniqueId")]
    partial class UniqueId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Models.Db.Account.ClientAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("Username")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("ClientAccounts");
                });

            modelBuilder.Entity("Models.Db.Account.WorkerAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTechnical")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Password")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("Surname")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("WorkerAccounts");
                });

            modelBuilder.Entity("Models.Db.Account.WorkerRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("TitleEn")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("TitleRu")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("WorkerRoles");
                });

            modelBuilder.Entity("Models.Db.Banner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("ExtUrl")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<string>("Image")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("Models.Db.ClientLoginRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("Code")
                        .HasColumnType("bigint");

                    b.Property<long>("InvalidAttempts")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UniqueId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClientAccountId");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("ClientLoginRequests");
                });

            modelBuilder.Entity("Models.Db.Common.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsDeletable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Models.Db.CompanyInfo.AboutData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("AboutDatas");
                });

            modelBuilder.Entity("Models.Db.CompanyInfo.ApplicationStartupImageData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BackgroundImage")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ForegroundImage")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("ApplicationStartupImageDatas");
                });

            modelBuilder.Entity("Models.Db.CompanyInfo.ApplicationTerminationData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Terminated")
                        .HasColumnType("boolean");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("ApplicationTerminationDatas");
                });

            modelBuilder.Entity("Models.Db.CompanyInfo.DeliveryTermsData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("DeliveryTermsDatas");
                });

            modelBuilder.Entity("Models.Db.CompanyInfo.InstagramUrlData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("InstagramUrlDatas");
                });

            modelBuilder.Entity("Models.Db.CompanyInfo.VacanciesData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("VacanciesDatas");
                });

            modelBuilder.Entity("Models.Db.CompanyInfo.VkUrlData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("VkUrlDatas");
                });

            modelBuilder.Entity("Models.Db.DbCart.CartItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<long>("ClientAccountId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("MenuItemId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClientAccountId");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("MenuItemId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Models.Db.DbCart.FavoriteItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientAccountId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("MenuItemId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClientAccountId");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("MenuItemId");

                    b.ToTable("FavoriteItems");
                });

            modelBuilder.Entity("Models.Db.DbOrder.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AwaitedAtDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ClientAccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedAtDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreatorWorkerAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("DelayType")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeliveredAtDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DeliveryAddressId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("PaymentType")
                        .HasColumnType("bigint");

                    b.Property<long>("PickupType")
                        .HasColumnType("bigint");

                    b.Property<string>("Promocode")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid>("UniqueId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClientAccountId");

                    b.HasIndex("CreatorWorkerAccountId");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Models.Db.DbOrder.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("MenuItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<float>("PurchasePrice")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Models.Db.DbRestaurant.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("GmtOffsetFromMoscow")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("PriceGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("PriceGroupId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Models.Db.DbRestaurant.PriceGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("PriceGroups");
                });

            modelBuilder.Entity("Models.Db.DbRestaurant.Restaurant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("Models.Db.DeliveryAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientAccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Entrance")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Flat")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Floor")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Home")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Street")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Title")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("ClientAccountId");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("DeliveryAddresses");
                });

            modelBuilder.Entity("Models.Db.LatLngs.CityLatLng", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<float>("Lat")
                        .HasColumnType("real");

                    b.Property<float>("Lng")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("CityLatLngs");
                });

            modelBuilder.Entity("Models.Db.LatLngs.DeliveryAddressLatLng", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("DeliveryAddressId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<float>("Lat")
                        .HasColumnType("real");

                    b.Property<float>("Lng")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryAddressId")
                        .IsUnique();

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("DeliveryAddressLatLngs");
                });

            modelBuilder.Entity("Models.Db.LatLngs.DeliveryZoneLatLng", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<float>("Lat")
                        .HasColumnType("real");

                    b.Property<float>("Lng")
                        .HasColumnType("real");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("RestaurantId");

                    b.ToTable("ZoneLatLngs");
                });

            modelBuilder.Entity("Models.Db.LatLngs.RestaurantLatLng", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<float>("Lat")
                        .HasColumnType("real");

                    b.Property<float>("Lng")
                        .HasColumnType("real");

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("RestaurantId")
                        .IsUnique();

                    b.ToTable("RestaurantLatLngs");
                });

            modelBuilder.Entity("Models.Db.Menu.MenuCPFC", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("Calories")
                        .HasColumnType("real");

                    b.Property<float>("Carbohydrates")
                        .HasColumnType("real");

                    b.Property<float>("Fats")
                        .HasColumnType("real");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("MenuItemId")
                        .HasColumnType("bigint");

                    b.Property<float>("Proteins")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("MenuItemId")
                        .IsUnique();

                    b.ToTable("MenuCPFCs");
                });

            modelBuilder.Entity("Models.Db.Menu.MenuItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Image")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasMaxLength(48)
                        .HasColumnType("character varying(48)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Models.Db.Menu.MenuItemMeasure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("MeasureType")
                        .HasColumnType("bigint");

                    b.Property<long>("MenuItemId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("MenuItemId");

                    b.ToTable("MenuItemMeasure");
                });

            modelBuilder.Entity("Models.Db.Menu.MenuProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Image")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasMaxLength(48)
                        .HasColumnType("character varying(48)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("MenuProducts");
                });

            modelBuilder.Entity("Models.Db.MobilePushes.MobilePushByCity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("MobileNotificationsByCity");
                });

            modelBuilder.Entity("Models.Db.MobilePushes.MobilePushByPriceGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Image")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("MobileNotificationsByPriceGroup");
                });

            modelBuilder.Entity("Models.Db.Relations.BannerToCity", b =>
                {
                    b.Property<long>("BannerId")
                        .HasColumnType("bigint");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.HasKey("BannerId", "CityId");

                    b.HasIndex("CityId");

                    b.ToTable("BannerToCity");
                });

            modelBuilder.Entity("Models.Db.Relations.MenuItemToMenuProduct", b =>
                {
                    b.Property<long>("MenuProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("MenuItemId")
                        .HasColumnType("bigint");

                    b.HasKey("MenuProductId", "MenuItemId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("MenuItemToMenuProduct");
                });

            modelBuilder.Entity("Models.Db.Relations.MenuItemToPriceGroup", b =>
                {
                    b.Property<long>("PriceGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("MenuItemId")
                        .HasColumnType("bigint");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("PriceGroupId", "MenuItemId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("MenuItemToPriceGroup");
                });

            modelBuilder.Entity("Models.Db.Relations.MobilePushToCity", b =>
                {
                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long>("MobilePushByCityId")
                        .HasColumnType("bigint");

                    b.HasKey("CityId", "MobilePushByCityId");

                    b.HasIndex("MobilePushByCityId");

                    b.ToTable("MobilePushToCity");
                });

            modelBuilder.Entity("Models.Db.Relations.MobilePushToPriceGroup", b =>
                {
                    b.Property<long>("PriceGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("MobilePushByPriceGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("PriceGroupId", "MobilePushByPriceGroupId");

                    b.HasIndex("MobilePushByPriceGroupId");

                    b.ToTable("MobilePushToPriceGroup");
                });

            modelBuilder.Entity("Models.Db.Relations.WorkerAccountToRestaurant", b =>
                {
                    b.Property<long>("WorkerAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint");

                    b.HasKey("WorkerAccountId", "RestaurantId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("WorkerAccountToRestaurant");
                });

            modelBuilder.Entity("Models.Db.Relations.WorkerAccountToRole", b =>
                {
                    b.Property<long>("WorkerAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkerRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("WorkerAccountId", "WorkerRoleId");

                    b.HasIndex("WorkerRoleId");

                    b.ToTable("WorkerAccountToRole");
                });

            modelBuilder.Entity("Models.Db.RestaurantStop.RestaurantDeliveryStop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("IssuerId")
                        .HasColumnType("bigint");

                    b.Property<long>("Reason")
                        .HasColumnType("bigint");

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("IssuerId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("DeliveryStops");
                });

            modelBuilder.Entity("Models.Db.RestaurantStop.RestaurantPickupStop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("IssuerId")
                        .HasColumnType("bigint");

                    b.Property<long>("Reason")
                        .HasColumnType("bigint");

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("IssuerId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("PickupStops");
                });

            modelBuilder.Entity("Models.Db.Schedule.DeliveryOpenCloseTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<TimeSpan>("Close")
                        .HasColumnType("interval");

                    b.Property<long>("DayOfWeek")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("Open")
                        .HasColumnType("interval");

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("RestaurantId");

                    b.ToTable("DeliveryTimeOpenCloses");
                });

            modelBuilder.Entity("Models.Db.Schedule.PickupOpenCloseTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<TimeSpan>("Close")
                        .HasColumnType("interval");

                    b.Property<long>("DayOfWeek")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWorking")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("Open")
                        .HasColumnType("interval");

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("RestaurantId");

                    b.ToTable("PickupTimeOpenCloses");
                });

            modelBuilder.Entity("Models.Db.Sessions.TokenSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("HasFullAccess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTechnical")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Token")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<long>("WorkerAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("Token");

                    b.HasIndex("WorkerAccountId");

                    b.ToTable("TokenSessions");
                });

            modelBuilder.Entity("Models.Db.ClientLoginRequest", b =>
                {
                    b.HasOne("Models.Db.Account.ClientAccount", "ClientAccount")
                        .WithMany("LoginRequests")
                        .HasForeignKey("ClientAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientAccount");
                });

            modelBuilder.Entity("Models.Db.DbCart.CartItem", b =>
                {
                    b.HasOne("Models.Db.Account.ClientAccount", "ClientAccount")
                        .WithMany("CartItems")
                        .HasForeignKey("ClientAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.Menu.MenuItem", "MenuItem")
                        .WithMany("CartItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientAccount");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("Models.Db.DbCart.FavoriteItem", b =>
                {
                    b.HasOne("Models.Db.Account.ClientAccount", "ClientAccount")
                        .WithMany("FavoriteItems")
                        .HasForeignKey("ClientAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.Menu.MenuItem", "MenuItem")
                        .WithMany("FavoriteItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientAccount");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("Models.Db.DbOrder.Order", b =>
                {
                    b.HasOne("Models.Db.Account.ClientAccount", "ClientAccount")
                        .WithMany("Orders")
                        .HasForeignKey("ClientAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.Account.WorkerAccount", "CreatorWorkerAccount")
                        .WithMany("CreatedOrders")
                        .HasForeignKey("CreatorWorkerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.DeliveryAddress", "DeliveryAddress")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryAddressId");

                    b.HasOne("Models.Db.DbRestaurant.Restaurant", "Restaurant")
                        .WithMany("Orders")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientAccount");

                    b.Navigation("CreatorWorkerAccount");

                    b.Navigation("DeliveryAddress");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Models.Db.DbOrder.OrderItem", b =>
                {
                    b.HasOne("Models.Db.Menu.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.DbOrder.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Models.Db.DbRestaurant.City", b =>
                {
                    b.HasOne("Models.Db.DbRestaurant.PriceGroup", "PriceGroup")
                        .WithMany("Cities")
                        .HasForeignKey("PriceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceGroup");
                });

            modelBuilder.Entity("Models.Db.DbRestaurant.Restaurant", b =>
                {
                    b.HasOne("Models.Db.DbRestaurant.City", "City")
                        .WithMany("Restaurants")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Models.Db.DeliveryAddress", b =>
                {
                    b.HasOne("Models.Db.Account.ClientAccount", "ClientAccount")
                        .WithMany("DeliveryAddresses")
                        .HasForeignKey("ClientAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientAccount");
                });

            modelBuilder.Entity("Models.Db.LatLngs.CityLatLng", b =>
                {
                    b.HasOne("Models.Db.DbRestaurant.City", "City")
                        .WithOne("LatLng")
                        .HasForeignKey("Models.Db.LatLngs.CityLatLng", "CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Models.Db.LatLngs.DeliveryAddressLatLng", b =>
                {
                    b.HasOne("Models.Db.DeliveryAddress", "DeliveryAddress")
                        .WithOne("LatLng")
                        .HasForeignKey("Models.Db.LatLngs.DeliveryAddressLatLng", "DeliveryAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryAddress");
                });

            modelBuilder.Entity("Models.Db.LatLngs.DeliveryZoneLatLng", b =>
                {
                    b.HasOne("Models.Db.DbRestaurant.Restaurant", "Restaurant")
                        .WithMany("DeliveryZone")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Models.Db.LatLngs.RestaurantLatLng", b =>
                {
                    b.HasOne("Models.Db.DbRestaurant.Restaurant", "Restaurant")
                        .WithOne("Location")
                        .HasForeignKey("Models.Db.LatLngs.RestaurantLatLng", "RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Models.Db.Menu.MenuCPFC", b =>
                {
                    b.HasOne("Models.Db.Menu.MenuItem", "MenuItem")
                        .WithOne("CPFC")
                        .HasForeignKey("Models.Db.Menu.MenuCPFC", "MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("Models.Db.Menu.MenuItem", b =>
                {
                    b.HasOne("Models.Db.Common.Category", "Category")
                        .WithMany("MenuItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Models.Db.Menu.MenuItemMeasure", b =>
                {
                    b.HasOne("Models.Db.Menu.MenuItem", "MenuItem")
                        .WithMany("Measures")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("Models.Db.Menu.MenuProduct", b =>
                {
                    b.HasOne("Models.Db.Common.Category", "Category")
                        .WithMany("MenuProducts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Models.Db.Relations.BannerToCity", b =>
                {
                    b.HasOne("Models.Db.Banner", "Banner")
                        .WithMany("CitiesRelation")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.DbRestaurant.City", "City")
                        .WithMany("BannersRelation")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Models.Db.Relations.MenuItemToMenuProduct", b =>
                {
                    b.HasOne("Models.Db.Menu.MenuItem", "MenuItem")
                        .WithMany("MenuProductsRelation")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.Menu.MenuProduct", "MenuProduct")
                        .WithMany("MenuItemsRelation")
                        .HasForeignKey("MenuProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("MenuProduct");
                });

            modelBuilder.Entity("Models.Db.Relations.MenuItemToPriceGroup", b =>
                {
                    b.HasOne("Models.Db.Menu.MenuItem", "MenuItem")
                        .WithMany("PriceGroupsRelation")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.DbRestaurant.PriceGroup", "PriceGroup")
                        .WithMany("PriceGroupItems")
                        .HasForeignKey("PriceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("PriceGroup");
                });

            modelBuilder.Entity("Models.Db.Relations.MobilePushToCity", b =>
                {
                    b.HasOne("Models.Db.DbRestaurant.City", "City")
                        .WithMany("MobilePushesRelation")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.MobilePushes.MobilePushByCity", "MobilePushByCity")
                        .WithMany("CitiesRelation")
                        .HasForeignKey("MobilePushByCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("MobilePushByCity");
                });

            modelBuilder.Entity("Models.Db.Relations.MobilePushToPriceGroup", b =>
                {
                    b.HasOne("Models.Db.MobilePushes.MobilePushByPriceGroup", "MobilePushByPriceGroup")
                        .WithMany("PriceGroupsRelation")
                        .HasForeignKey("MobilePushByPriceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.DbRestaurant.PriceGroup", "PriceGroup")
                        .WithMany("MobilePushesRelation")
                        .HasForeignKey("PriceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MobilePushByPriceGroup");

                    b.Navigation("PriceGroup");
                });

            modelBuilder.Entity("Models.Db.Relations.WorkerAccountToRestaurant", b =>
                {
                    b.HasOne("Models.Db.DbRestaurant.Restaurant", "Restaurant")
                        .WithMany("WorkerAccountsRelation")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.Account.WorkerAccount", "WorkerAccount")
                        .WithMany("RestaurantsRelation")
                        .HasForeignKey("WorkerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("WorkerAccount");
                });

            modelBuilder.Entity("Models.Db.Relations.WorkerAccountToRole", b =>
                {
                    b.HasOne("Models.Db.Account.WorkerAccount", "WorkerAccount")
                        .WithMany("WorkerRolesRelation")
                        .HasForeignKey("WorkerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.Account.WorkerRole", "WorkerRole")
                        .WithMany("WorkerAccountsRelation")
                        .HasForeignKey("WorkerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkerAccount");

                    b.Navigation("WorkerRole");
                });

            modelBuilder.Entity("Models.Db.RestaurantStop.RestaurantDeliveryStop", b =>
                {
                    b.HasOne("Models.Db.Account.WorkerAccount", "Issuer")
                        .WithMany("IssuedDeliveryStops")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.DbRestaurant.Restaurant", "Restaurant")
                        .WithMany("DeliveryStops")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issuer");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Models.Db.RestaurantStop.RestaurantPickupStop", b =>
                {
                    b.HasOne("Models.Db.Account.WorkerAccount", "Issuer")
                        .WithMany("IssuedPickupStops")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Db.DbRestaurant.Restaurant", "Restaurant")
                        .WithMany("PickupStops")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issuer");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Models.Db.Schedule.DeliveryOpenCloseTime", b =>
                {
                    b.HasOne("Models.Db.DbRestaurant.Restaurant", "Restaurant")
                        .WithMany("DeliveryTimes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Models.Db.Schedule.PickupOpenCloseTime", b =>
                {
                    b.HasOne("Models.Db.DbRestaurant.Restaurant", "Restaurant")
                        .WithMany("PickupTimes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Models.Db.Sessions.TokenSession", b =>
                {
                    b.HasOne("Models.Db.Account.WorkerAccount", "WorkerAccount")
                        .WithMany("TokenSessions")
                        .HasForeignKey("WorkerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkerAccount");
                });

            modelBuilder.Entity("Models.Db.Account.ClientAccount", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("DeliveryAddresses");

                    b.Navigation("FavoriteItems");

                    b.Navigation("LoginRequests");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Models.Db.Account.WorkerAccount", b =>
                {
                    b.Navigation("CreatedOrders");

                    b.Navigation("IssuedDeliveryStops");

                    b.Navigation("IssuedPickupStops");

                    b.Navigation("RestaurantsRelation");

                    b.Navigation("TokenSessions");

                    b.Navigation("WorkerRolesRelation");
                });

            modelBuilder.Entity("Models.Db.Account.WorkerRole", b =>
                {
                    b.Navigation("WorkerAccountsRelation");
                });

            modelBuilder.Entity("Models.Db.Banner", b =>
                {
                    b.Navigation("CitiesRelation");
                });

            modelBuilder.Entity("Models.Db.Common.Category", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("MenuProducts");
                });

            modelBuilder.Entity("Models.Db.DbOrder.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Models.Db.DbRestaurant.City", b =>
                {
                    b.Navigation("BannersRelation");

                    b.Navigation("LatLng");

                    b.Navigation("MobilePushesRelation");

                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("Models.Db.DbRestaurant.PriceGroup", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("MobilePushesRelation");

                    b.Navigation("PriceGroupItems");
                });

            modelBuilder.Entity("Models.Db.DbRestaurant.Restaurant", b =>
                {
                    b.Navigation("DeliveryStops");

                    b.Navigation("DeliveryTimes");

                    b.Navigation("DeliveryZone");

                    b.Navigation("Location");

                    b.Navigation("Orders");

                    b.Navigation("PickupStops");

                    b.Navigation("PickupTimes");

                    b.Navigation("WorkerAccountsRelation");
                });

            modelBuilder.Entity("Models.Db.DeliveryAddress", b =>
                {
                    b.Navigation("LatLng");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Models.Db.Menu.MenuItem", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("CPFC");

                    b.Navigation("FavoriteItems");

                    b.Navigation("Measures");

                    b.Navigation("MenuProductsRelation");

                    b.Navigation("OrderItems");

                    b.Navigation("PriceGroupsRelation");
                });

            modelBuilder.Entity("Models.Db.Menu.MenuProduct", b =>
                {
                    b.Navigation("MenuItemsRelation");
                });

            modelBuilder.Entity("Models.Db.MobilePushes.MobilePushByCity", b =>
                {
                    b.Navigation("CitiesRelation");
                });

            modelBuilder.Entity("Models.Db.MobilePushes.MobilePushByPriceGroup", b =>
                {
                    b.Navigation("PriceGroupsRelation");
                });
#pragma warning restore 612, 618
        }
    }
}
